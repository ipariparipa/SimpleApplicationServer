// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "corbasas.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
CorbaSAS::ErrorHandling::Error::operator>>= (cdrStream &_n) const
{
  error_code >>= _n;
  _n.marshalString(error_text,0);

}

void
CorbaSAS::ErrorHandling::Error::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)error_code <<= _n;
  error_text = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CorbaSAS::ErrorHandling::ErrorException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CorbaSAS::ErrorHandling::ErrorException::insertToAnyFnNCP = 0;

CorbaSAS::ErrorHandling::ErrorException::ErrorException(const CorbaSAS::ErrorHandling::ErrorException& _s) : ::CORBA::UserException(_s)
{
  sas_module = _s.sas_module;
  invoker = _s.invoker;
  err = _s.err;

}

CorbaSAS::ErrorHandling::ErrorException::ErrorException(const char* _sas_module, const char* _invoker, const ErrorSequence _err)
{
  pd_insertToAnyFn    = CorbaSAS::ErrorHandling::ErrorException::insertToAnyFn;
  pd_insertToAnyFnNCP = CorbaSAS::ErrorHandling::ErrorException::insertToAnyFnNCP;
  sas_module = _sas_module;
  invoker = _invoker;
  err = _err;

}



CorbaSAS::ErrorHandling::ErrorException& CorbaSAS::ErrorHandling::ErrorException::operator=(const CorbaSAS::ErrorHandling::ErrorException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  sas_module = _s.sas_module;
  invoker = _s.invoker;
  err = _s.err;

  return *this;
}

CorbaSAS::ErrorHandling::ErrorException::~ErrorException() {}

void CorbaSAS::ErrorHandling::ErrorException::_raise() const { throw *this; }

const char* CorbaSAS::ErrorHandling::ErrorException::_PD_repoId = "IDL:CorbaSAS/ErrorHandling/ErrorException:1.0";
const char* CorbaSAS::ErrorHandling::ErrorException::_PD_typeId = "Exception/UserException/CorbaSAS::ErrorHandling::ErrorException";

CorbaSAS::ErrorHandling::ErrorException* CorbaSAS::ErrorHandling::ErrorException::_downcast(::CORBA::Exception* _e) {
  return (ErrorException*) _NP_is_a(_e, _PD_typeId);
}

const CorbaSAS::ErrorHandling::ErrorException* CorbaSAS::ErrorHandling::ErrorException::_downcast(const ::CORBA::Exception* _e) {
  return (const ErrorException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CorbaSAS::ErrorHandling::ErrorException::_NP_duplicate() const {
  return new ErrorException(*this);
}

const char* CorbaSAS::ErrorHandling::ErrorException::_NP_typeId() const {
  return _PD_typeId;
}

const char* CorbaSAS::ErrorHandling::ErrorException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CorbaSAS/ErrorHandling/ErrorException:1.0");
  return _PD_repoId;
}
 
void CorbaSAS::ErrorHandling::ErrorException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CorbaSAS::ErrorHandling::ErrorException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(sas_module,0);
  _n.marshalString(invoker,0);
  (const ErrorSequence&) err >>= _n;

}

void
CorbaSAS::ErrorHandling::ErrorException::operator<<= (cdrStream& _n)
{
  sas_module = _n.unmarshalString(0);
  invoker = _n.unmarshalString(0);
  (ErrorSequence&)err <<= _n;

}

::CORBA::Exception::insertExceptionToAny CorbaSAS::ErrorHandling::FatalErrorException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CorbaSAS::ErrorHandling::FatalErrorException::insertToAnyFnNCP = 0;

CorbaSAS::ErrorHandling::FatalErrorException::FatalErrorException(const CorbaSAS::ErrorHandling::FatalErrorException& _s) : ::CORBA::UserException(_s)
{
  sas_module = _s.sas_module;
  invoker = _s.invoker;
  err = _s.err;

}

CorbaSAS::ErrorHandling::FatalErrorException::FatalErrorException(const char* _sas_module, const char* _invoker, const ErrorSequence _err)
{
  pd_insertToAnyFn    = CorbaSAS::ErrorHandling::FatalErrorException::insertToAnyFn;
  pd_insertToAnyFnNCP = CorbaSAS::ErrorHandling::FatalErrorException::insertToAnyFnNCP;
  sas_module = _sas_module;
  invoker = _invoker;
  err = _err;

}



CorbaSAS::ErrorHandling::FatalErrorException& CorbaSAS::ErrorHandling::FatalErrorException::operator=(const CorbaSAS::ErrorHandling::FatalErrorException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  sas_module = _s.sas_module;
  invoker = _s.invoker;
  err = _s.err;

  return *this;
}

CorbaSAS::ErrorHandling::FatalErrorException::~FatalErrorException() {}

void CorbaSAS::ErrorHandling::FatalErrorException::_raise() const { throw *this; }

const char* CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId = "IDL:CorbaSAS/ErrorHandling/FatalErrorException:1.0";
const char* CorbaSAS::ErrorHandling::FatalErrorException::_PD_typeId = "Exception/UserException/CorbaSAS::ErrorHandling::FatalErrorException";

CorbaSAS::ErrorHandling::FatalErrorException* CorbaSAS::ErrorHandling::FatalErrorException::_downcast(::CORBA::Exception* _e) {
  return (FatalErrorException*) _NP_is_a(_e, _PD_typeId);
}

const CorbaSAS::ErrorHandling::FatalErrorException* CorbaSAS::ErrorHandling::FatalErrorException::_downcast(const ::CORBA::Exception* _e) {
  return (const FatalErrorException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CorbaSAS::ErrorHandling::FatalErrorException::_NP_duplicate() const {
  return new FatalErrorException(*this);
}

const char* CorbaSAS::ErrorHandling::FatalErrorException::_NP_typeId() const {
  return _PD_typeId;
}

const char* CorbaSAS::ErrorHandling::FatalErrorException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CorbaSAS/ErrorHandling/FatalErrorException:1.0");
  return _PD_repoId;
}
 
void CorbaSAS::ErrorHandling::FatalErrorException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CorbaSAS::ErrorHandling::FatalErrorException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(sas_module,0);
  _n.marshalString(invoker,0);
  (const ErrorSequence&) err >>= _n;

}

void
CorbaSAS::ErrorHandling::FatalErrorException::operator<<= (cdrStream& _n)
{
  sas_module = _n.unmarshalString(0);
  invoker = _n.unmarshalString(0);
  (ErrorSequence&)err <<= _n;

}

::CORBA::Exception::insertExceptionToAny CorbaSAS::ErrorHandling::NotImplementedException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CorbaSAS::ErrorHandling::NotImplementedException::insertToAnyFnNCP = 0;

CorbaSAS::ErrorHandling::NotImplementedException::NotImplementedException(const CorbaSAS::ErrorHandling::NotImplementedException& _s) : ::CORBA::UserException(_s)
{
  sas_module = _s.sas_module;
  invoker = _s.invoker;
  err = _s.err;

}

CorbaSAS::ErrorHandling::NotImplementedException::NotImplementedException(const char* _sas_module, const char* _invoker, const ErrorSequence _err)
{
  pd_insertToAnyFn    = CorbaSAS::ErrorHandling::NotImplementedException::insertToAnyFn;
  pd_insertToAnyFnNCP = CorbaSAS::ErrorHandling::NotImplementedException::insertToAnyFnNCP;
  sas_module = _sas_module;
  invoker = _invoker;
  err = _err;

}



CorbaSAS::ErrorHandling::NotImplementedException& CorbaSAS::ErrorHandling::NotImplementedException::operator=(const CorbaSAS::ErrorHandling::NotImplementedException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  sas_module = _s.sas_module;
  invoker = _s.invoker;
  err = _s.err;

  return *this;
}

CorbaSAS::ErrorHandling::NotImplementedException::~NotImplementedException() {}

void CorbaSAS::ErrorHandling::NotImplementedException::_raise() const { throw *this; }

const char* CorbaSAS::ErrorHandling::NotImplementedException::_PD_repoId = "IDL:CorbaSAS/ErrorHandling/NotImplementedException:1.0";
const char* CorbaSAS::ErrorHandling::NotImplementedException::_PD_typeId = "Exception/UserException/CorbaSAS::ErrorHandling::NotImplementedException";

CorbaSAS::ErrorHandling::NotImplementedException* CorbaSAS::ErrorHandling::NotImplementedException::_downcast(::CORBA::Exception* _e) {
  return (NotImplementedException*) _NP_is_a(_e, _PD_typeId);
}

const CorbaSAS::ErrorHandling::NotImplementedException* CorbaSAS::ErrorHandling::NotImplementedException::_downcast(const ::CORBA::Exception* _e) {
  return (const NotImplementedException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CorbaSAS::ErrorHandling::NotImplementedException::_NP_duplicate() const {
  return new NotImplementedException(*this);
}

const char* CorbaSAS::ErrorHandling::NotImplementedException::_NP_typeId() const {
  return _PD_typeId;
}

const char* CorbaSAS::ErrorHandling::NotImplementedException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CorbaSAS/ErrorHandling/NotImplementedException:1.0");
  return _PD_repoId;
}
 
void CorbaSAS::ErrorHandling::NotImplementedException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CorbaSAS::ErrorHandling::NotImplementedException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(sas_module,0);
  _n.marshalString(invoker,0);
  (const ErrorSequence&) err >>= _n;

}

void
CorbaSAS::ErrorHandling::NotImplementedException::operator<<= (cdrStream& _n)
{
  sas_module = _n.unmarshalString(0);
  invoker = _n.unmarshalString(0);
  (ErrorSequence&)err <<= _n;

}

CorbaSAS::SASModule_ptr CorbaSAS::SASModule_Helper::_nil() {
  return ::CorbaSAS::SASModule::_nil();
}

::CORBA::Boolean CorbaSAS::SASModule_Helper::is_nil(::CorbaSAS::SASModule_ptr p) {
  return ::CORBA::is_nil(p);

}

void CorbaSAS::SASModule_Helper::release(::CorbaSAS::SASModule_ptr p) {
  ::CORBA::release(p);
}

void CorbaSAS::SASModule_Helper::marshalObjRef(::CorbaSAS::SASModule_ptr obj, cdrStream& s) {
  ::CorbaSAS::SASModule::_marshalObjRef(obj, s);
}

CorbaSAS::SASModule_ptr CorbaSAS::SASModule_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CorbaSAS::SASModule::_unmarshalObjRef(s);
}

void CorbaSAS::SASModule_Helper::duplicate(::CorbaSAS::SASModule_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CorbaSAS::SASModule_ptr
CorbaSAS::SASModule::_duplicate(::CorbaSAS::SASModule_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CorbaSAS::SASModule_ptr
CorbaSAS::SASModule::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CorbaSAS::SASModule_ptr
CorbaSAS::SASModule::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CorbaSAS::SASModule_ptr
CorbaSAS::SASModule::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SASModule _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SASModule* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SASModule;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CorbaSAS::SASModule::_PD_repoId = "IDL:CorbaSAS/SASModule:1.0";


CorbaSAS::_objref_SASModule::~_objref_SASModule() {
  
}


CorbaSAS::_objref_SASModule::_objref_SASModule(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CorbaSAS::SASModule::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CorbaSAS::_objref_SASModule::_ptrToObjRef(const char* id)
{
  if( id == ::CorbaSAS::SASModule::_PD_repoId )
    return (::CorbaSAS::SASModule_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CorbaSAS::SASModule::_PD_repoId) )
    return (::CorbaSAS::SASModule_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_n_clonglong_i_cstring_i_cstring_i_cCorbaSAS_mSASModule_mOctetSequence_o_cCorbaSAS_mSASModule_mOctetSequence_e_cCorbaSAS_mErrorHandling_mErrorException_e_cCorbaSAS_mErrorHandling_mFatalErrorException_e_cCorbaSAS_mErrorHandling_mNotImplementedException
class _0RL_cd_5c6cb9384e27bb60_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5c6cb9384e27bb60_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CorbaSAS::SASModule::SessionID arg_0_;
  CorbaSAS::SASModule::SessionID* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  CorbaSAS::SASModule::OctetSequence_var arg_3_;
  const CorbaSAS::SASModule::OctetSequence* arg_3;
  CorbaSAS::SASModule::OctetSequence_var arg_4;
};

void _0RL_cd_5c6cb9384e27bb60_00000000::marshalArguments(cdrStream& _n)
{
  *arg_0 >>= _n;
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);
  (const CorbaSAS::SASModule::OctetSequence&) *arg_3 >>= _n;

}

void _0RL_cd_5c6cb9384e27bb60_00000000::unmarshalArguments(cdrStream& _n)
{
  (CorbaSAS::SASModule::SessionID&)arg_0_ <<= _n;
  arg_0 = &arg_0_;
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();
  arg_3_ = new CorbaSAS::SASModule::OctetSequence;
  (CorbaSAS::SASModule::OctetSequence&)arg_3_ <<= _n;
  arg_3 = &arg_3_.in();

}

void _0RL_cd_5c6cb9384e27bb60_00000000::marshalReturnedValues(cdrStream& _n)
{
  *arg_0 >>= _n;
  (const CorbaSAS::SASModule::OctetSequence&) arg_4 >>= _n;

}

void _0RL_cd_5c6cb9384e27bb60_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CorbaSAS::SASModule::SessionID&)*arg_0 <<= _n;
  arg_4 = new CorbaSAS::SASModule::OctetSequence;
  (CorbaSAS::SASModule::OctetSequence&)arg_4 <<= _n;

}

const char* const _0RL_cd_5c6cb9384e27bb60_00000000::_user_exns[] = {
  CorbaSAS::ErrorHandling::ErrorException::_PD_repoId,
  CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId,
  CorbaSAS::ErrorHandling::NotImplementedException::_PD_repoId
};

void _0RL_cd_5c6cb9384e27bb60_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::ErrorException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::ErrorException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::FatalErrorException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::NotImplementedException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::NotImplementedException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_5c6cb9384e27bb60_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5c6cb9384e27bb60_00000000* tcd = (_0RL_cd_5c6cb9384e27bb60_00000000*)cd;
  CorbaSAS::_impl_SASModule* impl = (CorbaSAS::_impl_SASModule*) svnt->_ptrToInterface(CorbaSAS::SASModule::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->invoke(*tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, tcd->arg_4.out());
#else
  if (!cd->is_upcall())
    impl->invoke(*tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, tcd->arg_4.out());
  else {
    try {
      impl->invoke(*tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3, tcd->arg_4.out());
    }
    catch(CorbaSAS::ErrorHandling::NotImplementedException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CorbaSAS::ErrorHandling::ErrorException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CorbaSAS::ErrorHandling::FatalErrorException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CorbaSAS::_objref_SASModule::invoke(::CorbaSAS::SASModule::SessionID& session_id, const char* module_name, const char* invoker, const ::CorbaSAS::SASModule::OctetSequence& in_msg, ::CorbaSAS::SASModule::OctetSequence_out out_msg)
{
  _0RL_cd_5c6cb9384e27bb60_00000000 _call_desc(_0RL_lcfn_5c6cb9384e27bb60_10000000, "invoke", 7);
  _call_desc.arg_0 = &(::CorbaSAS::SASModule::SessionID&) session_id;
  _call_desc.arg_1 = module_name;
  _call_desc.arg_2 = invoker;
  _call_desc.arg_3 = &(::CorbaSAS::SASModule::OctetSequence&) in_msg;

  _invoke(_call_desc);
  out_msg = _call_desc.arg_4._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_clonglong_e_cCorbaSAS_mErrorHandling_mErrorException_e_cCorbaSAS_mErrorHandling_mFatalErrorException
class _0RL_cd_5c6cb9384e27bb60_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5c6cb9384e27bb60_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CorbaSAS::SASModule::SessionID arg_1;
};

void _0RL_cd_5c6cb9384e27bb60_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_5c6cb9384e27bb60_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (CorbaSAS::SASModule::SessionID&)arg_1 <<= _n;

}

const char* const _0RL_cd_5c6cb9384e27bb60_20000000::_user_exns[] = {
  CorbaSAS::ErrorHandling::ErrorException::_PD_repoId,
  CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId
};

void _0RL_cd_5c6cb9384e27bb60_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::ErrorException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::ErrorException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::FatalErrorException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_5c6cb9384e27bb60_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5c6cb9384e27bb60_20000000* tcd = (_0RL_cd_5c6cb9384e27bb60_20000000*)cd;
  CorbaSAS::_impl_SASModule* impl = (CorbaSAS::_impl_SASModule*) svnt->_ptrToInterface(CorbaSAS::SASModule::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->endSession(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->endSession(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->endSession(tcd->arg_0, tcd->arg_1);
    }
    catch(CorbaSAS::ErrorHandling::ErrorException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CorbaSAS::ErrorHandling::FatalErrorException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CorbaSAS::_objref_SASModule::endSession(const char* module_name, ::CorbaSAS::SASModule::SessionID session_id)
{
  _0RL_cd_5c6cb9384e27bb60_20000000 _call_desc(_0RL_lcfn_5c6cb9384e27bb60_30000000, "endSession", 11);
  _call_desc.arg_0 = module_name;
  _call_desc.arg_1 = session_id;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_o_cstring_o_cstring_e_cCorbaSAS_mErrorHandling_mErrorException_e_cCorbaSAS_mErrorHandling_mFatalErrorException
class _0RL_cd_5c6cb9384e27bb60_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5c6cb9384e27bb60_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1;
  ::CORBA::String_var arg_2;
};

void _0RL_cd_5c6cb9384e27bb60_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_5c6cb9384e27bb60_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_5c6cb9384e27bb60_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_5c6cb9384e27bb60_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_1 = _n.unmarshalString(0);
  arg_2 = _n.unmarshalString(0);

}

const char* const _0RL_cd_5c6cb9384e27bb60_40000000::_user_exns[] = {
  CorbaSAS::ErrorHandling::ErrorException::_PD_repoId,
  CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId
};

void _0RL_cd_5c6cb9384e27bb60_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::ErrorException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::ErrorException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CorbaSAS::ErrorHandling::FatalErrorException::_PD_repoId) ) {
    CorbaSAS::ErrorHandling::FatalErrorException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_5c6cb9384e27bb60_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_5c6cb9384e27bb60_40000000* tcd = (_0RL_cd_5c6cb9384e27bb60_40000000*)cd;
  CorbaSAS::_impl_SASModule* impl = (CorbaSAS::_impl_SASModule*) svnt->_ptrToInterface(CorbaSAS::SASModule::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->getModuleInfo(tcd->arg_0, tcd->arg_1.out(), tcd->arg_2.out());
#else
  if (!cd->is_upcall())
    impl->getModuleInfo(tcd->arg_0, tcd->arg_1.out(), tcd->arg_2.out());
  else {
    try {
      impl->getModuleInfo(tcd->arg_0, tcd->arg_1.out(), tcd->arg_2.out());
    }
    catch(CorbaSAS::ErrorHandling::ErrorException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CorbaSAS::ErrorHandling::FatalErrorException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CorbaSAS::_objref_SASModule::getModuleInfo(const char* module_name, ::CORBA::String_out description, ::CORBA::String_out version)
{
  _0RL_cd_5c6cb9384e27bb60_40000000 _call_desc(_0RL_lcfn_5c6cb9384e27bb60_50000000, "getModuleInfo", 14);
  _call_desc.arg_0 = module_name;

  _invoke(_call_desc);
  description = _call_desc.arg_1._retn();
  version = _call_desc.arg_2._retn();


}
CorbaSAS::_pof_SASModule::~_pof_SASModule() {}


omniObjRef*
CorbaSAS::_pof_SASModule::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CorbaSAS::_objref_SASModule(ior, id);
}


::CORBA::Boolean
CorbaSAS::_pof_SASModule::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CorbaSAS::SASModule::_PD_repoId) )
    return 1;
  
  return 0;
}

const CorbaSAS::_pof_SASModule _the_pof_CorbaSAS_mSASModule;

CorbaSAS::_impl_SASModule::~_impl_SASModule() {}


::CORBA::Boolean
CorbaSAS::_impl_SASModule::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "invoke") ) {

    _0RL_cd_5c6cb9384e27bb60_00000000 _call_desc(_0RL_lcfn_5c6cb9384e27bb60_10000000, "invoke", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "endSession") ) {

    _0RL_cd_5c6cb9384e27bb60_20000000 _call_desc(_0RL_lcfn_5c6cb9384e27bb60_30000000, "endSession", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getModuleInfo") ) {

    _0RL_cd_5c6cb9384e27bb60_40000000 _call_desc(_0RL_lcfn_5c6cb9384e27bb60_50000000, "getModuleInfo", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CorbaSAS::_impl_SASModule::_ptrToInterface(const char* id)
{
  if( id == ::CorbaSAS::SASModule::_PD_repoId )
    return (::CorbaSAS::_impl_SASModule*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CorbaSAS::SASModule::_PD_repoId) )
    return (::CorbaSAS::_impl_SASModule*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CorbaSAS::_impl_SASModule::_mostDerivedRepoId()
{
  return ::CorbaSAS::SASModule::_PD_repoId;
}

POA_CorbaSAS::SASModule::~SASModule() {}

