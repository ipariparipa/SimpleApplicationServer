// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __corbasas_hh__
#define __corbasas_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_corbasas
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_corbasas
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_corbasas
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE CorbaSAS

_CORBA_MODULE_BEG

  _CORBA_MODULE ErrorHandling

  _CORBA_MODULE_BEG

    struct Error {
      typedef _CORBA_ConstrType_Variable_Var<Error> _var_type;

      
      ::CORBA::Long error_code;

      ::CORBA::String_member error_text;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef Error::_var_type Error_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< Error,Error_var > Error_out;

    class ErrorSequence_var;

    class ErrorSequence : public _CORBA_Unbounded_Sequence< Error >  {
    public:
      typedef ErrorSequence_var _var_type;
      inline ErrorSequence() {}
      inline ErrorSequence(const ErrorSequence& _s)
        : _CORBA_Unbounded_Sequence< Error > (_s) {}

      inline ErrorSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< Error > (_max) {}
      inline ErrorSequence(_CORBA_ULong _max, _CORBA_ULong _len, Error* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< Error > (_max, _len, _val, _rel) {}

    

      inline ErrorSequence& operator = (const ErrorSequence& _s) {
        _CORBA_Unbounded_Sequence< Error > ::operator=(_s);
        return *this;
      }
    };

    class ErrorSequence_out;

    class ErrorSequence_var {
    public:
      inline ErrorSequence_var() : _pd_seq(0) {}
      inline ErrorSequence_var(ErrorSequence* _s) : _pd_seq(_s) {}
      inline ErrorSequence_var(const ErrorSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new ErrorSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~ErrorSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline ErrorSequence_var& operator = (ErrorSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ErrorSequence_var& operator = (const ErrorSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new ErrorSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline Error& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ErrorSequence* operator -> () { return _pd_seq; }
      inline const ErrorSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ErrorSequence& () const { return *_pd_seq; }
#else
      inline operator const ErrorSequence& () const { return *_pd_seq; }
      inline operator ErrorSequence& () { return *_pd_seq; }
#endif
        
      inline const ErrorSequence& in() const { return *_pd_seq; }
      inline ErrorSequence&       inout()    { return *_pd_seq; }
      inline ErrorSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ErrorSequence* _retn() { ErrorSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ErrorSequence_out;
      
    private:
      ErrorSequence* _pd_seq;
    };

    class ErrorSequence_out {
    public:
      inline ErrorSequence_out(ErrorSequence*& _s) : _data(_s) { _data = 0; }
      inline ErrorSequence_out(ErrorSequence_var& _s)
        : _data(_s._pd_seq) { _s = (ErrorSequence*) 0; }
      inline ErrorSequence_out(const ErrorSequence_out& _s) : _data(_s._data) {}
      inline ErrorSequence_out& operator = (const ErrorSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ErrorSequence_out& operator = (ErrorSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator ErrorSequence*&()  { return _data; }
      inline ErrorSequence*& ptr()       { return _data; }
      inline ErrorSequence* operator->() { return _data; }

      inline Error& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ErrorSequence*& _data;

    private:
      ErrorSequence_out();
      ErrorSequence_out& operator=(const ErrorSequence_var&);
    };

    class ErrorException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member sas_module;

      ::CORBA::String_member invoker;

      ErrorSequence err;

    

      inline ErrorException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ErrorException(const ErrorException&);
      ErrorException(const char* i_sas_module, const char* i_invoker, const ErrorSequence i_err);
      ErrorException& operator=(const ErrorException&);
      virtual ~ErrorException();
      virtual void _raise() const;
      static ErrorException* _downcast(::CORBA::Exception*);
      static const ErrorException* _downcast(const ::CORBA::Exception*);
      static inline ErrorException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    class FatalErrorException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member sas_module;

      ::CORBA::String_member invoker;

      ErrorSequence err;

    

      inline FatalErrorException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      FatalErrorException(const FatalErrorException&);
      FatalErrorException(const char* i_sas_module, const char* i_invoker, const ErrorSequence i_err);
      FatalErrorException& operator=(const FatalErrorException&);
      virtual ~FatalErrorException();
      virtual void _raise() const;
      static FatalErrorException* _downcast(::CORBA::Exception*);
      static const FatalErrorException* _downcast(const ::CORBA::Exception*);
      static inline FatalErrorException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    class NotImplementedException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member sas_module;

      ::CORBA::String_member invoker;

      ErrorSequence err;

    

      inline NotImplementedException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      NotImplementedException(const NotImplementedException&);
      NotImplementedException(const char* i_sas_module, const char* i_invoker, const ErrorSequence i_err);
      NotImplementedException& operator=(const NotImplementedException&);
      virtual ~NotImplementedException();
      virtual void _raise() const;
      static NotImplementedException* _downcast(::CORBA::Exception*);
      static const NotImplementedException* _downcast(const ::CORBA::Exception*);
      static inline NotImplementedException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

  _CORBA_MODULE_END

#ifndef __CorbaSAS_mSASModule__
#define __CorbaSAS_mSASModule__

  class SASModule;
  class _objref_SASModule;
  class _impl_SASModule;
  
  typedef _objref_SASModule* SASModule_ptr;
  typedef SASModule_ptr SASModuleRef;

  class SASModule_Helper {
  public:
    typedef SASModule_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_SASModule, SASModule_Helper> SASModule_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_SASModule,SASModule_Helper > SASModule_out;

#endif

  // interface SASModule
  class SASModule {
  public:
    // Declarations for this interface type.
    typedef SASModule_ptr _ptr_type;
    typedef SASModule_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    typedef ::CORBA::LongLong SessionID;
    typedef ::CORBA::LongLong_out SessionID_out;

    class OctetSequence_var;

    class OctetSequence : public _CORBA_Unbounded_Sequence_Octet {
    public:
      typedef OctetSequence_var _var_type;
      inline OctetSequence() {}
      inline OctetSequence(const OctetSequence& _s)
        : _CORBA_Unbounded_Sequence_Octet(_s) {}

      inline OctetSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_Octet(_max) {}
      inline OctetSequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

    

      inline OctetSequence& operator = (const OctetSequence& _s) {
        _CORBA_Unbounded_Sequence_Octet::operator=(_s);
        return *this;
      }
    };

    class OctetSequence_out;

    class OctetSequence_var {
    public:
      inline OctetSequence_var() : _pd_seq(0) {}
      inline OctetSequence_var(OctetSequence* _s) : _pd_seq(_s) {}
      inline OctetSequence_var(const OctetSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new OctetSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~OctetSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline OctetSequence_var& operator = (OctetSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline OctetSequence_var& operator = (const OctetSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new OctetSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline OctetSequence* operator -> () { return _pd_seq; }
      inline const OctetSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator OctetSequence& () const { return *_pd_seq; }
#else
      inline operator const OctetSequence& () const { return *_pd_seq; }
      inline operator OctetSequence& () { return *_pd_seq; }
#endif
        
      inline const OctetSequence& in() const { return *_pd_seq; }
      inline OctetSequence&       inout()    { return *_pd_seq; }
      inline OctetSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline OctetSequence* _retn() { OctetSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class OctetSequence_out;
      
    private:
      OctetSequence* _pd_seq;
    };

    class OctetSequence_out {
    public:
      inline OctetSequence_out(OctetSequence*& _s) : _data(_s) { _data = 0; }
      inline OctetSequence_out(OctetSequence_var& _s)
        : _data(_s._pd_seq) { _s = (OctetSequence*) 0; }
      inline OctetSequence_out(const OctetSequence_out& _s) : _data(_s._data) {}
      inline OctetSequence_out& operator = (const OctetSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline OctetSequence_out& operator = (OctetSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator OctetSequence*&()  { return _data; }
      inline OctetSequence*& ptr()       { return _data; }
      inline OctetSequence* operator->() { return _data; }

      inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      OctetSequence*& _data;

    private:
      OctetSequence_out();
      OctetSequence_out& operator=(const OctetSequence_var&);
    };

  
  };

  class _objref_SASModule :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void invoke(::CorbaSAS::SASModule::SessionID& session_id, const char* module_name, const char* invoker, const ::CorbaSAS::SASModule::OctetSequence& in_msg, ::CorbaSAS::SASModule::OctetSequence_out out_msg);
    void endSession(const char* module_name, ::CorbaSAS::SASModule::SessionID session_id);
    void getModuleInfo(const char* module_name, ::CORBA::String_out description, ::CORBA::String_out version);

    inline _objref_SASModule()  { _PR_setobj(0); }  // nil
    _objref_SASModule(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_SASModule();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_SASModule(const _objref_SASModule&);
    _objref_SASModule& operator = (const _objref_SASModule&);
    // not implemented

    friend class SASModule;
  };

  class _pof_SASModule : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_SASModule() : _OMNI_NS(proxyObjectFactory)(SASModule::_PD_repoId) {}
    virtual ~_pof_SASModule();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_SASModule :
    public virtual omniServant
  {
  public:
    virtual ~_impl_SASModule();

    virtual void invoke(::CorbaSAS::SASModule::SessionID& session_id, const char* module_name, const char* invoker, const ::CorbaSAS::SASModule::OctetSequence& in_msg, ::CorbaSAS::SASModule::OctetSequence_out out_msg) = 0;
    virtual void endSession(const char* module_name, ::CorbaSAS::SASModule::SessionID session_id) = 0;
    virtual void getModuleInfo(const char* module_name, ::CORBA::String_out description, ::CORBA::String_out version) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_CorbaSAS
_CORBA_MODULE_BEG

  _CORBA_MODULE ErrorHandling
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

  class SASModule :
    public virtual CorbaSAS::_impl_SASModule,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~SASModule();

    inline ::CorbaSAS::SASModule_ptr _this() {
      return (::CorbaSAS::SASModule_ptr) _do_this(::CorbaSAS::SASModule::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CorbaSAS
_CORBA_MODULE_BEG

  _CORBA_MODULE ErrorHandling
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
CorbaSAS::SASModule::_marshalObjRef(::CorbaSAS::SASModule_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_corbasas
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_corbasas
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_corbasas
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_corbasas
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_corbasas
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_corbasas
#endif

#endif  // __corbasas_hh__

